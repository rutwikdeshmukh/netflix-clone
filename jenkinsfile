pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = '956630439322'
        AWS_DEFAULT_REGION = 'ap-south-1'
        ECR_REPO_NAME = 'netflix-ecr'
        IMAGE_TAG = 'netflix-clone-v2'
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages  {
        stage('CLEANUP') {
                steps {
                    deleteDir()
                }
        }
        stage('GIT CHECKOUT') {
            steps {
                git branch: 'main', url: 'https://github.com/rutwikdeshmukh/netflix-clone.git'
            }
        }
        // Analyzing the source code with Sonarqube
        stage('Sonarqube Analysis ') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix '''
                }
            }
        }
        // Retrieve an authentication token and authenticating docker client with registry
        stage('AUTHENTICATING DOCKER CLIENT WITH AWS ECR') {
                steps {
                    script {
                        sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                    }
                }
        }
        // Building the docker images
        stage('BUILDING IMAGE') {
            steps {
                script {
                    sh 'envsubst < Dockerfile > DockerfileTemp'
                    sh 'docker build -f DockerfileTemp -t netflix-clone .'
                }
            }
        }
        // Tagging the docker image
        stage('TAGGING IMAGE') {
            steps {
                script {
                    sh 'docker tag netflix-clone:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}'
                }
            }
        }
        //TRIVY SCAN
        stage('TRIVY IMAGE SCAN') {
            steps {
                sh 'trivy image ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}'
            }
        }
        // Pushing the Docker image to ECR
        stage('PUSH TO ECR') {
            steps {
                script {
                    sh 'docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}'
                }
            }
        }
    }
}
