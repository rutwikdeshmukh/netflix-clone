pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = '956630439322'
        AWS_DEFAULT_REGION = 'ap-south-1'
        API_KEY = '7975259a1710981340754da567bc7579'
        ECR_REPO_NAME = 'netflix-ecr'
        IMAGE_TAG = 'netflix-clone-v1'
    }

    // Retrieve an authentication token and authenticating docker client with registry
    stages  {
        stage('CLEANUP') {
                steps {
                    deleteDir()
                }
        }

        stage('AUTHENTICATING DOCKER CLIENT WITH AWS ECR') {
                steps {
                    script {
                    sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                    }
                }
        }

        // Cloning into source code repository
        stage('GIT CLONE') {
            steps {
                sh 'git clone https://github.com/rutwikdeshmukh/netflix-clone.git'
            }
        }

        stage('CHECK ALL FILES ') {
            steps {
                dir('/var/lib/jenkins/workspace/CI/netflix-clone/') {
                    sh 'ls -Alf'
                    sh 'pwd'
                }
            }
        }

        // Building the docker images
        stage('BUILDING IMAGE') {
            steps {
                script {
                    dir('/var/lib/jenkins/workspace/CI/netflix-clone/') {
                        sh 'envsubst < Dockerfile > DockerfileTemp'
                        sh 'docker build -f DockerfileTemp -t netflix-clone .'
                    }
                }
            }
        }

        // Tagging the docker image
        stage('TAGGING IMAGE') {
            steps {
                script {
                    dir('/var/lib/jenkins/workspace/CI/netflix-clone/') {
                        sh 'docker tag netflix-clone:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}'
                    }
                }
            }
        }

        // Pushing the Docker image to ECR
        stage('PUSH TO ECR') {
            steps {
                script {
                    dir('/var/lib/jenkins/workspace/CI/netflix-clone/') {
                        sh 'docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}'
                    }
                }
            }
        }
    }
}

//WEBHOOK

pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/saicharan20/DevSecOps-Project.git'
            }
        }
        stage('Sonarqube Analysis ') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix '''
                }
            }
        }
        stage('quality gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        // stage('Install Dependencies') {
        //     steps {
        //         sh 'npm install'
        //     }
        // }
        stage('TRIVY FS SCAN') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }
        // stage('TRIVY') {
        //     steps {
        //         sh 'trivy image saicharan20/netflix:latest > trivyimage.txt'
        //     }
        }
    }

pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
        sonar-scanner 'SONAR-SCAN'
    }
    environment {
        SONAR_SCAN_HOME = tool 'SONAR-SCAN'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/rutwikdeshmukh/netflix-clone.git'
            }
        }
        stage('Sonarqube Analysis ') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SONAR_SCAN_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix \
                    -Dsonar.sources=. \
                    -Dsonar.qualitygate.wait=true '''
                }
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }
    }
}
